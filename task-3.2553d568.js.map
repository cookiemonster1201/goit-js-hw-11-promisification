{"version":3,"sources":["js/task-3.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","id","delay","promise","Promise","resolve","reject","setTimeout","amount","then","result","console","log","catch","error"],"mappings":";AAEA,MAAMA,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkB,EAAGC,GAAAA,MACnBC,MAAAA,EAAQR,EAA0B,IAAK,KActCS,OAZS,IAAIC,QAAQ,CAACC,EAASC,KACpCC,WAAW,KACUV,KAAKE,SAAW,GAGjCM,iBAAuBJ,kBAAmBC,OAE1CI,kCAAuCL,+BAExCC,MAMPF,EAAgB,CAAEC,GAAI,GAAIO,OAAQ,MAC/BC,KAAKC,IACJC,QAAQC,sBAAmBF,OAE5BG,MAAMC,IACLH,QAAQC,oBAAiBE,OAG7Bd,EAAgB,CAAEC,GAAI,GAAIO,OAAQ,MAC/BC,KAAKC,IACJC,QAAQC,sBAAmBF,OAE5BG,MAAMC,IACLH,QAAQC,oBAAiBE,OAG7Bd,EAAgB,CAAEC,GAAI,GAAIO,OAAQ,KAC/BC,KAAKC,IACJC,QAAQC,sBAAmBF,OAE5BG,MAAMC,IACLH,QAAQC,oBAAiBE,OAG7Bd,EAAgB,CAAEC,GAAI,GAAIO,OAAQ,MAC/BC,KAAKC,IACJC,QAAQC,sBAAmBF,OAE5BG,MAAMC,IACLH,QAAQC,oBAAiBE","file":"task-3.2553d568.js","sourceRoot":"../src","sourcesContent":["// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = ({ id }) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve(`Transaction ${id} processed in ${delay}ms`);\n      } else {\n        reject(`Error processing transaction ${id}. Please try again later.`);\n      }\n    }, delay);\n  });\n\n  return promise;\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(result => {\n    console.log(`SUCCESS --> ${result}`);\n  })\n  .catch(error => {\n    console.log(`ERROR --> ${error}`);\n  });\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(result => {\n    console.log(`SUCCESS --> ${result}`);\n  })\n  .catch(error => {\n    console.log(`ERROR --> ${error}`);\n  });\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(result => {\n    console.log(`SUCCESS --> ${result}`);\n  })\n  .catch(error => {\n    console.log(`ERROR --> ${error}`);\n  });\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(result => {\n    console.log(`SUCCESS --> ${result}`);\n  })\n  .catch(error => {\n    console.log(`ERROR --> ${error}`);\n  });\n"]}